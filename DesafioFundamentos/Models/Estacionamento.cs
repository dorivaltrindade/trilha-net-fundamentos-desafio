namespace DesafioFundamentos.Models
{
    public class Estacionamento
    {
        private decimal precoInicial = 0;
        private decimal precoPorHora = 0;
        private List<string> veiculos = new List<string>();

        public Estacionamento(decimal precoInicial, decimal precoPorHora)
        {
            this.precoInicial = precoInicial;
            this.precoPorHora = precoPorHora;
        }

        public void AdicionarVeiculo()
        {
            // TODO: Pedir para o usu√°rio digitar uma placa (ReadLine) e adicionar na lista "veiculos"
            // *IMPLEMENTE AQUI*
            Console.WriteLine("Digite a placa do ve√≠culo para estacionar:");
            // letras mai√∫sculas na identifica√ß√£o das placas
            string placa = Console.ReadLine().ToUpper();
            // placas sem espa√ßo em branco entre os caracters
            placa = placa.Replace(" ", "");
            // caso a placa j√° esteja cadastrada, n√£o adicionar
            if (!veiculos.Contains(placa)){
                veiculos.Add(placa);
                veiculos.Sort();
                Console.WriteLine($"üöó Ve√≠culo Placa {placa} - ok üòâ‚úî");
            } else {
                Console.WriteLine($"Placa  [ {placa} ]  j√° est√° cadastrada! üòï‚ùå");
            }
        }

        public void RemoverVeiculo()
        {
            Console.WriteLine("Digite a placa do ve√≠culo para remover:");

            // Pedir para o usu√°rio digitar a placa e armazenar na vari√°vel placa
            string placa = Console.ReadLine().ToUpper();

            // Verifica se o ve√≠culo existe
            if (veiculos.Any(x => x.ToUpper() == placa.ToUpper()))
            {
                Console.WriteLine($"Digite a quantidade de horas que o ve√≠culo [{placa}] permaneceu estacionado:");
               
                // *IMPLEMENTE AQUI*
                string horasInformadas = Console.ReadLine();
                int.TryParse(horasInformadas, out int horas);
                decimal valorTotal = precoPorHora*horas + precoInicial*((horas>0)?1:0);

                // TODO: Remover a placa digitada da lista de ve√≠culos
                veiculos.Remove(placa);

                Console.WriteLine($"O ve√≠culo {placa} foi removido e o pre√ßo total foi de: R$ {valorTotal.ToString("F2")} üí∞");
            }
            else
            {
                Console.WriteLine($"Desculpe, esse ve√≠culo [{placa}] n√£o est√° estacionado aqui. Confira se digitou a placa corretamente");
            }
        }

        public void ListarVeiculos()
        {
            // Verifica se h√° ve√≠culos no estacionamento
            if (veiculos.Any())
            {
                Console.WriteLine($"Ve√≠culo{((veiculos.Count>1)?"s":"")} estacionado{((veiculos.Count>1)?"s":"")} [{veiculos.Count}]:");
                // TODO: Realizar um la√ßo de repeti√ß√£o, exibindo os ve√≠culos estacionados
                foreach (string item in veiculos){
                    Console.WriteLine($"üöó {item}");
                }
            }
            else
            {
                Console.WriteLine("N√£o h√° ve√≠culos estacionados.‚ùå");
            }
        }
    }
}
